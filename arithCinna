%% Name: Brian Raytick
%% Date: 09/21/2016
%% Tabs: ***

Package arithmetic

%% This package provides functions for working with integers,
%% represented as binary lists.
%% Lists begin with the low order end of the number.
%% For example, list [1,1,0,0,1] stands for the binary number
%% 10011, or 19 in decimal.
%%
%% A list is *normalized if it does not end on 0.  All of the
%% following functions produce normalized results, even if the
%% parameter(s) are not normalized.

================================================================
                        export
================================================================

Abbrev Bit = Integer.

Expect
  inc           : [Bit] -> [Bit]

                %: inc(x) is x+1, where both x and the result are
                %: binary numbers represented as lists.
                %: For example inc([1,0,1,1]) = [0,1,1,1]
                ;

  dec           : [Bit] -> [Bit]

                %: dec(x) = max(0, x-1), where x and the result are
                %: binary numbers represented as lists.
                ;

  sum           :  ([Bit], [Bit]) -> [Bit]

                %: sum(x,y) = x + y, where x, y and the result are
                %: binary numbers represented as lists.  For example,
                %: sum([0,1,1], [1,1,1]) = [1,0,1,1].  (6 + 7 = 13)
                ;

  diff          :  ([Bit], [Bit]) -> [Bit]

                %: diff(x,y) = max(0, x - y), where x, y and the result are
                %: binary numbers represented as lists.  For example,
                %: diff([1,1,1], [0,1,1]) = [1]  (7 - 6 = 1) and
                %: diff([0,1,1], [1,1,1]) = []  (6 - 7 = 0).
                ;

  product       : ([Bit], [Bit]) -> [Bit]

                %: product(x,y) = x * y, where x, y and the result are
                %: binary numbers represented as lists.  For example,
                %: product([1,1], [1,1]) = [1,0,0,1].  (3*3 = 9)
                ;

  compareInts   : ([Bit], [Bit]) -> Char

                %: compareInts(x,y) yields
                %:    '<'  if x < y
                %:    '='  if x = y
                %:    '>'  if x > y
                %: where x and y are binary numbers represented as
                %: lists.  For example, compareInts([0,0,1,1], [0,1,0,1])
                %: yields '>', since 12 > 10.
  
%Expect

================================================================
                        implementation
================================================================

Import removeTrailing from "collect/list".
Define normalize = removeTrailing 0.

===============================================================
%%                    inc
===============================================================

%% incn is similar to inc, but does not normalize its result.
%% (n stands for non-normalizing)

Define 
  ----------------------------------------------
  %% 0 + 1 = 1

  case incn []       = [1]
  ----------------------------------------------
  %% (2t) + 1 = 2t + 1
   
  case incn (0 :: t) = 1 :: t
  ----------------------------------------------
  %% (2t+1) + 1 = 2(t+1)

  case incn (1 :: t) = 0 :: incn t
  ----------------------------------------------
%Define

Define inc x = normalize(incn x).

Example inc [1,1,0,1,1,0,0] = [0,0,1,1,1].
Example inc [1] = [0,1].
Example inc [1,0,0] = [0,1].

===============================================================
%%                    dec
===============================================================

%% decn is similar to dec, but does not normalize its result.
%% (n stands for non-normalizing)

Define
  ----------------------------------------------
  %% [] - 1 = []
  
  case decn [] = []
  ----------------------------------------------
  %% (2t) - 1 = 2t - 1
  
  case decn (1::t) = 0::t
  ----------------------------------------------
  %% (2t-1) - 1 = 2(t-1)
  
  case decn (0::t) = 1::decn(t)
  ----------------------------------------------
%Define

Define dec x = normalize(decn x).

Example dec [1,1,0,1,1,0,0] = [0,1,0,1,1].
Example dec [1] = [].
Example dec [0,0,1] = [1,1]. 

===============================================================
%%                    sum
===============================================================

%% sumn is similar to sum, but does not normalize its result.
%% (n stands for non-normalizing)

Define
  ----------------------------------------------
  %% x and y is 0 or empty
  
  case sumn([],[]) = []
  ----------------------------------------------
  %% y is 0 or empty
  
  case sumn(x, []) = x
  ----------------------------------------------
  %% x is 0 or empty
  
  case sumn([], y) = y
  ----------------------------------------------
  %% 2x+2y = 2(x+y)
  
  case sumn(0::x, 0::y) = 0::sumn(x, y)
  ----------------------------------------------
  %%  2x + (2y + 1) = 2xy + 1
  
  case sumn(0::x, 1::y) = 1::sumn(x, y)
  ----------------------------------------------
  %%  (2x + 1) + (2y) = 2xy + 1
  
  case sumn(1::x, 0::y) = 1::sumn(x, y)
  ----------------------------------------------
  %% (2x + 1) + (2y + 1) = 2x + 2y + 2
  
  case sumn(1::x, 1::y) = 0::inc(sumn(x, y))
  ----------------------------------------------
  
%Define

Define  sum x = normalize(sumn x).

Example sum ([0,0,1] , [1,0,1]) = [1,0,0,1].
Example sum ([0,1,1] , [0,1]) = [0,0,0,1].
Example sum ([0,1] , [1]) = [1,1].
Example sum ([1,0,1,0,1,0,1] , [0,1,0,0,0,1,0,1,0,0,1,0,1]) = [1,1,1,0,1,1,1,1,0,0,1,0,1].

===============================================================
%%                    diff
===============================================================

%% difn is similar to dif, but does not normalize its result.
%% (n stands for non-normalizing)

Define
  ----------------------------------------------
  %%  x and y = 0 or empty
  
  case diffn ([], []) = []
  ----------------------------------------------
  %%  x = 0 or empty
  
  case diffn ([], ?) = []
  ----------------------------------------------
  %%  y = 0 or empty
  
  case diffn (x, []) = x
  ----------------------------------------------
  %% (2x) - (2y) = 2x - 2y
  
  case diffn (0::x, 0::y) = 0:: diffn(x, y)
  ----------------------------------------------
  %% (2x) - (2y + 1) = (2xy - 1)
  
  case diffn (0::x, 1::y) = 1:: diffn(dec(x), y) 
  ----------------------------------------------
  %% (2x + 1) - (2y) = (2x-2y) + 1
    
  case diffn (1::x, 0::y) = 1:: diffn(x, y)
  ----------------------------------------------
  %% (2x + 1) - (2y + 1) = 2x - 2y
  
  case diffn (1::x, 1::y) = 0:: diffn(x, y)
  ----------------------------------------------

%Define 

Define diff x = normalize(diffn x). 
  
Example diff([0,0,1], [1,1]) = [1].  
Example diff([1,0,1], [1,1]) = [0,1].
Example diff([0,0,0,1,0,1], [1,0,1]) = [1,1,0,0,0,1].
Example diff([1,0,1], [1,0,1,0,1,0,1]) = [].
  
===============================================================
%%                    product
===============================================================

%% productn is similar to product, but does not normalize its result.
%% (n stands for non-normalizing)

Define
  ----------------------------------------------
  %% when x and y = [] == []
  
  case productn ([],[]) = []
  ----------------------------------------------
  %% x == 0 = []
  
  case productn ([],?) = []
  ----------------------------------------------
  %% y == 0 = []
  
  case productn (?,[]) = []
  ----------------------------------------------
  %% 2x * (2y + 1) = 2xy + 2x
  
  case productn (0::x, 0::y) = 0::0::productn(x, y)
  ----------------------------------------------
  %% 2x * (2y + 1) = 2xy + 2x
  
  case productn (0::x, 1::y) = sum(0::0::productn(x, y), 0::x)
  ----------------------------------------------
  %% 2x * 2y = 2xy
  
  case productn (1::x, 0::y) = sum(0::0::productn(x, y), 0::y)
  ----------------------------------------------
  %% 2x + 1 * 2y = 2x2x + 2y
  
  case productn (1::x, 1::y) = sum(sum(0::0::productn(x, y), 0::x), 1::y)
  ----------------------------------------------
    
%define
  
Define product x = normalize(productn x).

Example product ([1,0,1], [1,0,1,1,1]) = [1,0,0,0,1,0,0,1].
Example product ([0,0,0,0,1], [1,0,1,1,0,1,0,1,1]) = [0,0,0,0,1,0,1,1,0,1,0,1,1].
  
===============================================================
%%                    compareInts
===============================================================
%%: compareInts(x,y) yields
%%:    '<'  if x < y
%%:    '='  if x = y
%%:    '>'  if x > y
%%: where x and y are binary numbers represented as
%%: lists.  For example, compareInts([0,0,1,1], [0,1,0,1])
%%: yields '>', since 12 > 10.

Define
  ----------------------------------------------
  %% when x = 0 and y = 0 then they are equal
  
  case compareInts ([] ,[]) = '='
  ----------------------------------------------
  %% < when nil?(y) == false
  
  case compareInts ([], y) = '<' when nil?(y) == false
  ----------------------------------------------
  %% > when nil?(x) == false
  
  case compareInts (x, []) = '>' when nil?(x) == false
  ----------------------------------------------
  %% when length(x) > length(y)
  
  case compareInts (x, y) = '>' when length(x) > length(y)
  ----------------------------------------------
  %% when length(x) < length(y)
  
  case compareInts (x, y) = '<' when length(x) < length(y)
  ----------------------------------------------
  %% when x < y and compareInts(xs, ys) are =
  
  case compareInts (x::xs, y::ys) = '<' when x < y and compareInts(xs, ys) == '='
  ----------------------------------------------
  %% when x > y and compareInts(xs, ys) are =
  
  case compareInts (x::xs, y::ys) = '>' when x > y and compareInts(xs, ys) == '='
  ----------------------------------------------
  %% when x = y and compareInts(xs, ys) =
  
  case compareInts (x::xs, y::ys) = '=' when x == y and compareInts(xs, ys) == '='
  ----------------------------------------------
  %% when compareInts(xs, ys) == <
  
  case compareInts (?::xs, ?::ys) = '<' when compareInts(xs, ys) == '<'
  ----------------------------------------------
  %% when compareInts(xs, ys) == >
  
  case compareInts (?::xs, ?::ys) = '>' when compareInts(xs, ys) == '>'
  ----------------------------------------------
 
%Define

Example compareInts ([1,0,1,0,1], [0,1,0,1]) = '>'.
Example compareInts ([1,1,1,1,1], [0,0,0,0,0,1]) = '<'.
Example compareInts ([1,0,0,0,1], [0,0,0,0,1]) = '>'.
Example compareInts ([1,1,1,1,1], [1,1]) = '>'.
Example compareInts ([1,0,1,0,1], [1,0,1,0,1]) = '='.


%Package
