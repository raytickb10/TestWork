%% Name: Brian Raytick
%% Date: 10/21/2016
%% Tabs: ***

Package deriv

==============================================================
%% This package defines type Expression, and 
%% some functions on expressions, including
%% 
%%    taking the derivative of an expression
%%   
%%    simplifying an expression
%%   
%% The simplification is very rudimentary.
==============================================================

==============================================================
			export
==============================================================

==============================================================
%%			Expression
==============================================================
%% The expression type is defined in the body of this package
%% so that its representation is hidden from view.  Here,
%% we only advertise that the type exists.
==============================================================

%: An expression involves constants, an independent variable
%: called xx and a collection of operations.  The operations
%: that are supported are
%:
%:   xx		The independent variable
%:   constant(c)	A constant expression having value c
%:   A+B		The sum of expressions A and B

Type Expression interface

  with ==, $
%Type

==============================================================
%%                derivativeX
==============================================================

Exception derivativeX(Expression) 
  "Unable to take the derivative of an expression"
%Exception

==============================================================
%%			Functions
==============================================================
%% Here are the exported functions for expressions.  Only 
%% these are public.
==============================================================

Expect
  constant	: Real -> Expression
  
  		%: constant(r) is an expression that is the
		%: real number r.  For example, constant(2.5)
		%: is the real number 2.5, as an expression.
		;
		
  xx		: Expression
  
  		%: xx is the independent variable.
		;
		
 +		: (Expression, Expression) -> Expression
  
  		%: a + b is the expression that is the sum of
		%: expressions a and b.
		;
		
 -		: (Expression, Expression) -> Expression
  
  		%: a - b is the expression that is the difference of
		%: expressions a and b.
		;
 *		: (Expression, Expression) -> Expression
  
  		%: a - b is the expression that is the product of
		%: expressions a and b.
		;
 ^		: (Expression, Expression) -> Expression
  
  		%: a ^ b is the expression that is the power of
		%: expressions a and b.
		;


  deriv		: Expression -> Expression
  
  		%: deriv(e) is the derivative of e with
		%: respect to variable xx.
		;
  
  simplify	: Expression -> Expression
  
  		%: simplify(e) is a (possibly) simplified
		%: form of expression e.
%Expect


========================================================
			implementation
========================================================
Import "math/mathfun".
========================================================
%%		   Type Expression
========================================================
%% Here, type Expression type and its constructors
%% and unconstructors are defined.  We do not want the
%% default definition of $, and instead define our own.
========================================================

Type Expression =
  
  --------------------------------------------------
  %% An expression can be a real constant.
  --------------------------------------------------
    
  | constant(Real)
    
  --------------------------------------------------
  %% An expression can be the independent variable xx.
  --------------------------------------------------
    
  | xx
    
  --------------------------------------------------
  %% An expression can be the sum of two expressions.
  --------------------------------------------------
    
  | Expression + Expression



--------------------------------------------------
  %% An expression can be the difference of two expressions.
  --------------------------------------------------
    
  | Expression - Expression

  
   
--------------------------------------------------
  %% An expression can be the product of two expressions.
  --------------------------------------------------
    
  | Expression * Expression



--------------------------------------------------
  %% An expression can be the exponent of two expressions.
  --------------------------------------------------
    
  | Expression ^ Expression

  with ==
%Type
========================================================

========================================================
%%		Expression Simplification
========================================================
========================================================
%%			simplifyExp
========================================================
Define
----------------------------------------------------
  %% constant arithmetic
  ----------------------------------------------------

  case simplifyExp(constant(m) ^ constant(n)) = constant(m^*n)

  ----------------------------------------------------
  %% 0 ^ a = 0
  %% a ^ 1 = a 
  %% 1 ^ a = 1
  ----------------------------------------------------

  case simplifyExp(constant(0) ^ ?)  = constant(0)
  case simplifyExp(m ^ constant(1))  = m
  case simplifyExp(constant(1) ^ ?) = constant(1)

 ----------------------------------------------------
  %% 0 ^0 = undefined
  ----------------------------------------------------

  case simplifyExp(constant(0) ^ constant(0))  = constant(0)

  ----------------------------------------------------
  %% a ^ 0 = 1
  ----------------------------------------------------

  case simplifyExp(? ^ constant(0))  = constant(1)

  ----------------------------------------------------
  %% Otherwise, don't simplify.  Return a as is.
  ----------------------------------------------------

  else simplifyExp(a)  = a
%Define
========================================================
%%			simplifyProduct
========================================================
Define
----------------------------------------------------
  %% constant arithmetic
  ----------------------------------------------------

  case simplifyProduct(constant(m) - constant(n)) = constant(m*n)

  ----------------------------------------------------
  %% 0 * a = 0
  %% 1 * a = a
  %% a * 1 = a
  ----------------------------------------------------

  case simplifyProduct(constant(0) * ?)  = constant(0)
  case simplifyProduct(constant(1) * ?) = constant(1)
  case simplifyProduct(? * constant(1)) = constant(1)

  ----------------------------------------------------
  %% a * 0 = 0
  ----------------------------------------------------

  case simplifyProduct(? * constant(0))  = constant(0)

  ----------------------------------------------------
  %% Otherwise, don't simplify.  Return a as is.
  ----------------------------------------------------

  else simplifyProduct(a)  = a
%Define 
========================================================
%%			simplifyDiff
========================================================
Define
----------------------------------------------------
  %% constant arithmetic
  ----------------------------------------------------

  case simplifyDiff(constant(m) - constant(n)) = constant(m-n) 
  ----------------------------------------------------
  %% 0 - a = a
  ----------------------------------------------------

  case simplifyDiff(constant(0) - a)  = constant(0) - a

  ----------------------------------------------------
  %% a - 0 = a
  ----------------------------------------------------

  case simplifyDiff(a - constant(0))  = a

  ----------------------------------------------------
  %% Otherwise, don't simplify.  Return a as is.
  ----------------------------------------------------

  else simplifyDiff(a)  = a
%Define 
========================================================
%%			simplifySum
========================================================
Define
  
  ----------------------------------------------------
  %% constant arithmetic
  ----------------------------------------------------

  case simplifySum(constant(m) + constant(n)) = constant(m+n)

  ----------------------------------------------------
  %% 0 + a = a
  ----------------------------------------------------

  case simplifySum(constant(0) + a)  = a

  ----------------------------------------------------
  %% a + 0 = a
  ----------------------------------------------------

  case simplifySum(a+ constant(0))  = a

  ----------------------------------------------------
  %% Otherwise, don't simplify.  Return a as is.
  ----------------------------------------------------

  else simplifySum(a)  = a
%Define

========================================================
%%			simplify
========================================================
%% Function simplify does a full simplification, going into
%% the structure of an expression looking for subexpressions
%% that can be simplified.
========================================================

Define
  case simplify(constant(r)) = constant(r)
  case simplify(=xx)         = xx
  case simplify(a + b)       = simplifySum(simplify(a) + simplify(b))
  case simplify(a - b)       = simplifyDiff(simplify(a) - simplify(b))
  case simplify(a * b)       = simplifyProduct(simplify(a) * simplify(b))
  case simplify(a ^ b)       = simplifyExp(simplify(a) ^ simplify(b))
%Define


========================================================
%%			Computing Derivatives
========================================================

========================================================
%%			rawDeriv
========================================================
%% rawDeriv(e) is the derivative of expression e with
%% respect to variable xx, but it does not do any
%% simplifications.  It employs the rules for
%% derivatives directly.
========================================================

Define 
    
  ----------------------------------------------------
  %% c' = 0.
  ----------------------------------------------------

  case rawDeriv(constant(?)) = constant(0)

  ----------------------------------------------------
  %% xx' = 1.
  ----------------------------------------------------

  case rawDeriv(=xx) = constant(1)

  ----------------------------------------------------
  %% (a+b)' = a' + b'.
  ----------------------------------------------------

  case rawDeriv(a + b) = rawDeriv(a) + rawDeriv(b)

 ----------------------------------------------------
  %% (a - b)' 	 =  	a' - b'.
  ----------------------------------------------------
  case rawDeriv(a-b) = rawDeriv(a) - rawDeriv(b)
----------------------------------------------------
  %% (ab)' 	 =  	a(b') + (a')b.
  ----------------------------------------------------
  case rawDeriv(a*b) = (a*rawDeriv(b))+ (b*rawDeriv(a))
 ----------------------------------------------------
  %% (ac)' 	 =  	ca^(c-1)a' .
  ----------------------------------------------------

  case rawDeriv(a ^ constant(c)) = 
	constant(c) * a ^ (constant(c) - constant(1)) * rawDeriv(a)
  
  ----------------------------------------------------
  %% else, the derivative fails.
  ----------------------------------------------------

  else  rawDeriv(e) = fail(derivativeX(e))
  


%Define

========================================================
%%			deriv
=======================================================
%% Deriv takes the derivative with simplification.
=======================================================

Define deriv(a) = simplify(rawDeriv(a)).

========================================================
%%			$ for Expressions
========================================================
%% Function $ is used to convert an expression to a string.
%% It tries to make the expression look readable.
========================================================

Define
  case $(constant(r)) = $(r)
  case $(=xx)         = "x"
  case $(a + b)       = concat["(", $(a), "+", $(b), ")"]
  case $(a - b)       = concat["(", $(a), "-", $(b), ")"]
  case $(a * b)       = concat["(", $(a), "*", $(b), ")"]
  case $(a ^ b)       = concat["(", $(a), "^", $(b), ")"]
  
%Define

%Package
